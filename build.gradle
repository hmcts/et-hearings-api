plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.3'
  id 'org.springframework.boot' version '3.1.5'
  id 'org.owasp.dependencycheck' version '8.4.0'
  id 'com.github.ben-manes.versions' version '0.49.0'
  id 'org.sonarqube' version '4.4.1.3373'
  id 'hmcts.ccd.sdk' version '5.4.7'

}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = false
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = false
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.12.4'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.55.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

def sonarExclusions = [
  "**/gov/hmcts/reform/et/model/service/hearingvalues/ServiceHearingValues.java",
  "**/uk/gov/hmcts/reform/et/exception/**",
  "**/uk/gov/hmcts/reform/et/model/service/ServiceHearingRequest.java",
  "**/gov/hmcts/reform/et/config/**",
  "**/gov/hmcts/reform/et/Application.java",
  "**/gov/hmcts/reform/et/service/VerifyTokenService.java",
  "**/gov/hmcts/reform/et/model/ErrorResponse.java",
  "**/gov/hmcts/reform/et/service/hmc/topic/ProcessHmcMessageService.java",
  "**/gov/hmcts/reform/et/model/hmc/message/HmcMessage.java",
  "**/gov/hmcts/reform/et/model/hmc/message/HearingUpdate.java",
  "**/gov/hmcts/reform/et/model/hearing/HearingGetResponse.java",
]

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: et-hearings-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:et-hearings-api"
    property "sonar.coverage.exclusions", sonarExclusions.join(', ')
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = 0
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  skipConfigurations = [
    "checkstyle",
    "compileOnly",
    "pmd",
    "integrationTest",
    "functionalTest",
    "smokeTest",
    "contractTestRuntimeClasspath",
    "contractTestCompileClasspath"
  ]
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

ext {
  log4JVersion = "2.20.0"
}

ext['snakeyaml.version'] = '2.0'

dependencies {
  implementation group: 'com.squareup.okio', name: 'okio', version: '3.6.0'
  implementation group: 'org.apache.xmlgraphics', name: 'batik-all', version: '1.17', ext: 'pom'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-activemq', version: '2.7.17'
  implementation group: 'org.springframework', name: 'spring-jms', version: '6.0.13'
  implementation group: 'org.springframework', name: 'spring-messaging', version: '6.0.13'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.2.0'
  implementation group: 'com.github.hmcts', name: 'et-common', version:'1.16.1'
  implementation group: 'com.github.hmcts', name: 'et-data-model', version:'2.8.1'
  implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
  implementation group: 'org.springframework.retry', name: 'spring-retry', version: '2.0.4'
 implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.0.4' , {
    exclude group: 'commons-io', module: 'commons-io'
  }
  implementation group: 'com.github.hmcts', name: 'ccd-client', version: '4.9.2'
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.2'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.1.1'
  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.37'
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.0.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  implementation group: 'io.rest-assured', name: 'rest-assured'
  implementation group: 'org.apache.qpid', name: 'qpid-jms-client', version: '2.4.0'
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '10.1.15'
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '10.1.15'
  implementation group: 'org.bouncycastle', name: 'bcprov-jdk18on', version: '1.76'
  implementation group: 'org.elasticsearch', name: 'elasticsearch', version: '8.10.4'
  implementation group: 'com.azure', name: 'azure-core', version: '1.44.1'
  implementation group: 'com.azure', name: 'azure-messaging-servicebus', version: '7.14.4'

    implementation 'org.junit.jupiter:junit-jupiter:5.10.0'

    compileOnly 'org.projectlombok:lombok'
  annotationProcessor group: 'org.projectlombok', name: 'lombok'
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok'
  functionalTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok'
  integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok'
  testImplementation group: 'org.projectlombok', name: 'lombok'

  testImplementation(platform('org.junit:junit-bom:5.10.0'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
}

mainClassName = 'uk.gov.hmcts.reform.et.Application'

bootJar {
  archiveFileName = "et-hearings-api.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
